name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  test_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run API endpoint tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "OPENAI_API_KEY is set: ${{ secrets.OPENAI_API_KEY != '' }}"
          pytest -vv backend/test_api_endpoints.py
      - name: Run prompt tests with coverage
        env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd backend
          output=$(pytest --cov=test_prompts --cov-report=term-missing --cov-fail-under=95 -vv test_prompts.py)
          coverage=$(echo "$output" | grep -oP 'TOTAL\s+\d+\s+\d+\s+\K\d+')
          test_count=$(echo "$output" | grep -oP '\d+(?= passed)')
          echo "coverage=$coverage" >> $GITHUB_OUTPUT
          echo "test_count=$test_count" >> $GITHUB_OUTPUT
        id: prompt_tests
    outputs:
      coverage: ${{ steps.prompt_tests.outputs.coverage }}
      test_count: ${{ steps.prompt_tests.outputs.test_count }}

  deploy:
    needs: test_backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to Fly.io
        working-directory: backend
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "FLY_API_TOKEN is set: ${{ secrets.FLY_API_TOKEN != '' }}" 
          flyctl deploy --remote-only

  notify_slack:
    if: always()
    needs: [test_backend, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Determine API Endpoint Tests Status
        run: |
          if [ "${{ needs.test_backend.result }}" == "success" ]; then
            echo "api_tests_status=Passed" >> $GITHUB_ENV
          else
            echo "api_tests_status=Failed" >> $GITHUB_ENV
          fi
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            CI/CD Pipeline Results:
            - Test Backend: ${{ needs.test_backend.result }}
              - API Endpoint Tests: ${{ env.api_tests_status }}
              - Prompt Tests Coverage: ${{ needs.test_backend.outputs.coverage }}%
              - Number of Tests Run: ${{ needs.test_backend.outputs.test_count }}
            - Deploy: ${{ needs.deploy.result }}
            - Overall Status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
